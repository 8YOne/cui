#!/usr/bin/env node

/**
 * Mock Claude CLI executable for testing with tool use support
 * Simulates the real Claude CLI streaming JSONL output format with tool use blocks
 */

const crypto = require('crypto');

function generateSessionId() {
  return crypto.randomUUID();
}

function generateMessageId() {
  return 'msg_' + crypto.randomBytes(12).toString('hex');
}

function generateToolUseId() {
  return 'tooluseblock_' + crypto.randomBytes(8).toString('hex');
}

function parseArgs() {
  const args = process.argv.slice(2);
  const config = {
    print: false,
    outputFormat: 'text',
    verbose: false,
    maxTurns: 7,
    prompt: '',
    workingDir: process.cwd(),
    mcpConfig: null,
    permissionPromptTool: null,
    allowedTools: [],
    resume: false,
    sessionId: null
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '-p':
      case '--print':
        config.print = true;
        break;
      case '--output-format':
        if (i + 1 < args.length) {
          config.outputFormat = args[++i];
        }
        break;
      case '--verbose':
        config.verbose = true;
        break;
      case '--max-turns':
        if (i + 1 < args.length) {
          config.maxTurns = parseInt(args[++i], 10);
        }
        break;
      case '--add-dir':
        if (i + 1 < args.length) {
          config.workingDir = args[++i];
        }
        break;
      case '--mcp-config':
        if (i + 1 < args.length) {
          config.mcpConfig = args[++i];
        }
        break;
      case '--permission-prompt-tool':
        if (i + 1 < args.length) {
          config.permissionPromptTool = args[++i];
        }
        break;
      case '--allowedTools':
        if (i + 1 < args.length) {
          config.allowedTools = args[++i].split(',');
        }
        break;
      case '--resume':
        config.resume = true;
        if (i + 1 < args.length) {
          config.sessionId = args[++i];
          // The next argument after session ID is the message for resume
          if (i + 1 < args.length && !args[i + 1].startsWith('-')) {
            config.prompt = args[++i];
          }
        }
        break;
      default:
        // If it doesn't start with -, it's probably the prompt
        if (!arg.startsWith('-') && !config.resume) {
          config.prompt = arg;
        }
        break;
    }
  }

  return config;
}

function generateToolResponse(prompt) {
  const content = [];
  const lowerPrompt = prompt.toLowerCase();
  
  // Always add some text content first
  content.push({
    type: 'text',
    text: `I'll help you with that. Let me process your request.`
  });
  
  // Handle different tool scenarios based on prompt
  if (lowerPrompt.includes('edit') && lowerPrompt.includes('file')) {
    // Edit tool
    content.push({
      type: 'tool_use',
      id: generateToolUseId(),
      name: 'Edit',
      input: {
        file_path: '/test/file.txt',
        old_string: 'Hello World\nThis is a test file\nWith multiple lines',
        new_string: 'Hello Universe\nThis is an edited test file\nWith multiple lines\nAnd one more line'
      }
    });
  }
  
  if (lowerPrompt.includes('write') && lowerPrompt.includes('file')) {
    // Write tool
    content.push({
      type: 'tool_use',
      id: generateToolUseId(),
      name: 'Write',
      input: {
        file_path: '/test/new-file.txt',
        content: 'This is a new file\nWith some content\nSpanning multiple lines\nTotal of 4 lines'
      }
    });
  }
  
  if (lowerPrompt.includes('multiple edits') || lowerPrompt.includes('multiedit')) {
    // MultiEdit tool
    content.push({
      type: 'tool_use',
      id: generateToolUseId(),
      name: 'MultiEdit',
      input: {
        file_path: '/test/multi-file.txt',
        edits: [
          {
            old_string: 'First line',
            new_string: 'Modified first line\nWith extra content'
          },
          {
            old_string: 'Second line',
            new_string: 'Modified second line'
          },
          {
            old_string: 'Third line\nFourth line',
            new_string: 'Combined third and fourth line'
          }
        ]
      }
    });
  }
  
  // Add closing text
  content.push({
    type: 'text',
    text: '\n\nI\'ve completed the requested operations.'
  });
  
  return content;
}

function outputJson(obj) {
  console.log(JSON.stringify(obj));
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function simulateClaudeResponse(config) {
  const sessionId = config.sessionId || generateSessionId();
  const messageId = generateMessageId();
  const content = generateToolResponse(config.prompt);
  
  // Calculate token usage (simple approximation)
  const inputTokens = Math.max(4, Math.floor(config.prompt.length / 4));
  const outputTokens = 150; // Approximate for tool use responses
  const cacheCreationTokens = 15433; // Match the example
  
  // System init message
  const initMessage = {
    type: 'system',
    subtype: 'init',
    cwd: config.workingDir,
    session_id: sessionId,
    tools: [
      'Task', 'Bash', 'Glob', 'Grep', 'LS', 'exit_plan_mode', 
      'Read', 'Edit', 'MultiEdit', 'Write', 'NotebookRead', 
      'NotebookEdit', 'WebFetch', 'TodoRead', 'TodoWrite', 'WebSearch'
    ],
    mcp_servers: config.mcpConfig ? [{ name: 'ccui-permissions', type: 'stdio' }] : [],
    model: 'claude-opus-4-20250514',
    permissionMode: 'default',
    apiKeySource: 'none',
    // Include environment info for testing
    env_pwd: process.env.PWD,
    env_init_cwd: process.env.INIT_CWD
  };
  
  // Assistant response message with tool use
  const assistantMessage = {
    type: 'assistant',
    message: {
      id: messageId,
      type: 'message',
      role: 'assistant',
      model: 'claude-opus-4-20250514',
      content: content,
      stop_reason: 'tool_use',
      stop_sequence: null,
      usage: {
        input_tokens: inputTokens,
        cache_creation_input_tokens: cacheCreationTokens,
        cache_read_input_tokens: 0,
        output_tokens: outputTokens,
        service_tier: 'standard'
      }
    },
    parent_tool_use_id: null,
    session_id: sessionId
  };
  
  // Result message
  const resultMessage = {
    type: 'result',
    subtype: 'success',
    is_error: false,
    duration_ms: 4236,
    duration_api_ms: 7564,
    num_turns: 1,
    result: 'Tool operations completed successfully',
    session_id: sessionId,
    total_cost_usd: 0.29052355,
    usage: {
      input_tokens: inputTokens,
      cache_creation_input_tokens: cacheCreationTokens,
      cache_read_input_tokens: 0,
      output_tokens: outputTokens,
      server_tool_use: {
        web_search_requests: 0
      }
    }
  };

  // Output the messages with delays
  if (config.outputFormat === 'stream-json') {
    outputJson(initMessage);
    await delay(50);
    outputJson(assistantMessage);
    await delay(50);
    outputJson(resultMessage);
  } else if (config.outputFormat === 'json') {
    outputJson(resultMessage);
  } else {
    // Text format
    console.log('Tool operations completed');
  }
}

// Error handling for invalid directories
function checkWorkingDirectory(config) {
  if (config.workingDir === '/nonexistent/directory/that/does/not/exist') {
    console.error('Error: Directory does not exist');
    process.exit(1);
  }
  
  if (config.workingDir === '/nonexistent/directory') {
    console.error('Error: Directory does not exist');
    process.exit(1);
  }
}

// Main execution
async function main() {
  const config = parseArgs();
  
  // Check for error conditions
  checkWorkingDirectory(config);
  
  // If no prompt provided, show help
  if (!config.prompt) {
    console.log('Usage: claude [options] [command] [prompt]');
    console.log('Claude Code - starts an interactive session by default, use -p/--print for non-interactive output');
    process.exit(0);
  }
  
  // Simulate Claude response
  await simulateClaudeResponse(config);
}

// Run the mock
main().catch(console.error);