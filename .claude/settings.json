{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(npm test)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(ls:*)",
      "Bash(npm run typecheck:*)",
      "WebFetch(domain:github.com)",
      "Bash(mkdir:*)",
      "Bash(npm test:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run test:*)",
      "Bash(timeout 30s npm test -- claude-process-manager.test.ts --verbose)",
      "Bash(claude --version)",
      "Bash(cp:*)",
      "Bash(npm run lint)",
      "Bash(rg:*)",
      "Bash(rg:*)",
      "Bash(rg:*)",
      "Bash(node:*)",
      "Bash(npm install:*)",
      "Bash(cat:*)",
      "Bash(rm:*)",
      "Bash(time npm test:*)",
      "Bash(npm build)",
      "Bash(timeout 90s npm test:*)",
      "Bash(timeout 10s npm test:*)",
      "Bash(sed:*)",
      "Bash(chmod:*)",
      "Bash(./tests/__mocks__/claude -p \"Say 1+1=2 and quit\" --output-format stream-json --verbose --max-turns 7)",
      "Bash(./tests/__mocks__/claude -p \"Hello world\" --output-format json)",
      "Bash(npm bin:*)",
      "Bash(npx which:*)",
      "Bash(./tests/__mocks__/claude -p \"Test message\")",
      "Bash(./tests/__mocks__/claude -p \"test\" --output-format stream-json)",
      "Bash(time:*)",
      "Bash(time:*)",
      "Bash(./.git/hooks/pre-commit:*)",
      "Bash(LOG_LEVEL=debug npm test -- tests/unit/claude-process-manager.test.ts --testNamePattern=\"should start a conversation\")",
      "Bash(HOME=/tmp/test-claude-home node node_modules/@anthropic-ai/claude-code/cli.js -p \"test\" --output-format stream-json)",
      "Bash(HOME=/tmp/test-claude-home node node_modules/@anthropic-ai/claude-code/cli.js -p \"test\" --output-format stream-json --verbose)",
      "Bash(/Users/panwenbo/Repos/ccui/node_modules/@anthropic-ai/claude-code/cli.js -p \"Output what is 34 + 1 and quit\" --output-format stream-json --verbose --add-dir /Users/panwenbo/Repos/ccui)",
      "Bash(npm run:*)",
      "Bash(npm run:*)",
      "Bash(LOG_LEVEL=debug npm run integration-tests 2 >& 1)",
      "Bash(LOG_LEVEL=debug npx jest tests/integration/streaming-service.test.ts -t \"should stream Claude responses through HTTP endpoint\" --detectOpenHandles --forceExit 2 >& 1)",
      "Bash(LOG_LEVEL=debug npx jest tests/integration/streaming-service.test.ts -t \"should stream Claude responses through HTTP endpoint\" --verbose --no-coverage 2 >& 1)",
      "Bash(npx jest:*)",
      "Bash(LOG_LEVEL=debug npm run integration-tests -- --testNamePattern=\"should handle complete streaming lifecycle\")",
      "Bash(NODE_ENV=test LOG_LEVEL=debug npm run integration-tests -- --testNamePattern=\"should handle complete streaming lifecycle\")",
      "Bash(NODE_ENV=test LOG_LEVEL=debug npm run integration-tests -- --verbose --testNamePattern=\"should handle complete streaming lifecycle\")",
      "Bash(LOG_LEVEL=debug npm run integration-tests -- --verbose --no-coverage --testNamePattern=\"should handle complete streaming lifecycle\" 2>&1)",
      "Bash(pkill:*)",
      "Bash(git push:*)"
    ],
    "deny": []
  }
}